// Mocks generated by Mockito 5.4.4 from annotations
// in ebook_reader/test/presentations/notifiers/home/home_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:ebook_reader/common/resources/data_state.dart' as _i2;
import 'package:ebook_reader/data/models/api/author/author.dart' as _i10;
import 'package:ebook_reader/data/models/api/book/book.dart' as _i8;
import 'package:ebook_reader/data/models/api/book_set/book_set.dart' as _i6;
import 'package:ebook_reader/data/models/api/formats/formats.dart' as _i3;
import 'package:ebook_reader/data/models/api/translator/translator.dart'
    as _i11;
import 'package:ebook_reader/data/models/database/library_item.dart' as _i7;
import 'package:ebook_reader/data/repositories/book_repository_impl.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDataState_0<T> extends _i1.SmartFake implements _i2.DataState<T> {
  _FakeDataState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFormats_1 extends _i1.SmartFake implements _i3.Formats {
  _FakeFormats_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BookRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookRepository extends _i1.Mock implements _i4.BookRepository {
  MockBookRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.DataState<_i6.BookSet>> getAllBooks(int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllBooks,
          [page],
        ),
        returnValue: _i5.Future<_i2.DataState<_i6.BookSet>>.value(
            _FakeDataState_0<_i6.BookSet>(
          this,
          Invocation.method(
            #getAllBooks,
            [page],
          ),
        )),
      ) as _i5.Future<_i2.DataState<_i6.BookSet>>);

  @override
  _i5.Future<_i2.DataState<_i6.BookSet>> getBookDetail(int? bookId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBookDetail,
          [bookId],
        ),
        returnValue: _i5.Future<_i2.DataState<_i6.BookSet>>.value(
            _FakeDataState_0<_i6.BookSet>(
          this,
          Invocation.method(
            #getBookDetail,
            [bookId],
          ),
        )),
      ) as _i5.Future<_i2.DataState<_i6.BookSet>>);

  @override
  _i5.Future<void> insert(_i7.LibraryItem? item) => (super.noSuchMethod(
        Invocation.method(
          #insert,
          [item],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i7.LibraryItem?> getItemById(int? bookId) => (super.noSuchMethod(
        Invocation.method(
          #getItemById,
          [bookId],
        ),
        returnValue: _i5.Future<_i7.LibraryItem?>.value(),
      ) as _i5.Future<_i7.LibraryItem?>);
}

/// A class which mocks [BookSet].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookSet extends _i1.Mock implements _i6.BookSet {
  MockBookSet() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get count => (super.noSuchMethod(
        Invocation.getter(#count),
        returnValue: 0,
      ) as int);

  @override
  List<_i8.Book> get books => (super.noSuchMethod(
        Invocation.getter(#books),
        returnValue: <_i8.Book>[],
      ) as List<_i8.Book>);

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [Book].
///
/// See the documentation for Mockito's code generation for more information.
class MockBook extends _i1.Mock implements _i8.Book {
  MockBook() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: 0,
      ) as int);

  @override
  String get title => (super.noSuchMethod(
        Invocation.getter(#title),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#title),
        ),
      ) as String);

  @override
  List<_i10.Author> get authors => (super.noSuchMethod(
        Invocation.getter(#authors),
        returnValue: <_i10.Author>[],
      ) as List<_i10.Author>);

  @override
  List<_i11.Translator> get translators => (super.noSuchMethod(
        Invocation.getter(#translators),
        returnValue: <_i11.Translator>[],
      ) as List<_i11.Translator>);

  @override
  List<String> get subjects => (super.noSuchMethod(
        Invocation.getter(#subjects),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<String> get bookshelves => (super.noSuchMethod(
        Invocation.getter(#bookshelves),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<String> get languages => (super.noSuchMethod(
        Invocation.getter(#languages),
        returnValue: <String>[],
      ) as List<String>);

  @override
  bool get copyright => (super.noSuchMethod(
        Invocation.getter(#copyright),
        returnValue: false,
      ) as bool);

  @override
  String get mediaType => (super.noSuchMethod(
        Invocation.getter(#mediaType),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#mediaType),
        ),
      ) as String);

  @override
  _i3.Formats get formats => (super.noSuchMethod(
        Invocation.getter(#formats),
        returnValue: _FakeFormats_1(
          this,
          Invocation.getter(#formats),
        ),
      ) as _i3.Formats);

  @override
  int get downloadCount => (super.noSuchMethod(
        Invocation.getter(#downloadCount),
        returnValue: 0,
      ) as int);

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
